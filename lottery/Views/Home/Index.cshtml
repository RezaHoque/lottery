@{
    ViewData["Title"] = "The great bangal jackpot";
}

<div class="text-center" id="dvAnimation">
    <span style="font-size:25px;" id="connectionText">...</span>
    <span class="blinking-cursor">_</span>
    <br />
    <img src="~/images/rocket.gif" width="400" height="300" />
</div>
<div id="dvButton" class="text-center">
    <span style="font-size:20px;padding:10px;">Connected. Be Afraid Of The Future.</span>
    <a href="/home/draw" class="btn btn-danger">Draw now</a>
    <canvas id="q"></canvas>
</div>
<script>
    var btnElement = document.getElementById("dvButton");
    btnElement.style.visibility = "hidden";
    function init() {

        wait(1000).then(() => {
            clearText()
            typeText('Hello! ').then(typeLoop)

            setTimeout(function (){
                document.getElementById("dvAnimation").remove();
                btnElement.style.visibility = "visible";
                matrixEffect();
            },5000);
        })

        function typeLoop() {
            typeText('Connecting to ')
                .then(() => wait(2000))
                .then(() => removeText('Connecting to '))
                .then(() => typeText('satellite'))
                .then(() => wait(2000))
                .then(() => removeText('satellite'))
                .then(typeLoop)
        }

    }


    const elementNode = document.getElementById('connectionText')
    let text = ''

    function updateNode() {
        elementNode.innerText = text
    }

    function pushCharacter(character) {
        text += character
        updateNode()
    }

    function popCharacter() {
        text = text.slice(0, text.length - 1)
        updateNode()
    }

    function clearText() {
        text = ''
        updateNode()
    }


    function wait(time) {
        if (time === undefined) {
            const randomMsInterval = 100 * Math.random()
            time = randomMsInterval < 50 ? 10 : randomMsInterval
        }

        return new Promise(resolve => {
            setTimeout(() => {
                requestAnimationFrame(resolve)
            }, time)
        })
    }

    function typeCharacter(character) {
        return new Promise(resolve => {
            pushCharacter(character)
            wait().then(resolve)
        })
    }

    function removeCharacter() {
        return new Promise(resolve => {
            popCharacter()
            wait().then(resolve)
        })
    }

    function typeText(text) {
        return new Promise(resolve => {

            function type([character, ...text]) {
                typeCharacter(character)
                    .then(() => {
                        if (text.length) type(text)
                        else resolve()
                    })
            }

            type(text)
        })
    }

    function removeText({ length: amount }) {
        return new Promise(resolve => {

            function remove(count) {
                removeCharacter()
                    .then(() => {
                        if (count > 1) remove(count - 1)
                        else resolve()
                    })
            }

            remove(amount)
        })
    }

    function matrixEffect() {
        var s = window.screen;
        var width = q.width = s.width;
        var height = q.height = s.height;
        var letters = Array(256).join(1).split('');

        var draw = function () {
            q.getContext('2d').fillStyle = 'rgba(0,0,0,.05)';
            q.getContext('2d').fillRect(0, 0, width, height);
            q.getContext('2d').fillStyle = '#0F0';
            letters.map(function (y_pos, index) {
                text = String.fromCharCode(3e4 + Math.random() * 33);
                x_pos = index * 10;
                q.getContext('2d').fillText(text, x_pos, y_pos);
                letters[index] = (y_pos > 758 + Math.random() * 1e4) ? 0 : y_pos + 10;
            });
        };
        setInterval(draw, 33);
    }

    init()

</script>